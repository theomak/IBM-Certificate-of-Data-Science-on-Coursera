{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<a href=\"https://www.bigdatauniversity.com\"><img src=\"https://ibm.box.com/shared/static/cw2c7r3o20w9zn8gkecaeyjhgw3xdgbj.png\" width=\"400\" align=\"center\"></a>\n",
    "\n",
    "<h1><center>Simple Linear Regression</center></h1>\n",
    "\n",
    "\n",
    "<h4>About this Notebook</h4>\n",
    "In this notebook, we learn how to use scikit-learn to implement simple linear regression. We download a dataset that is related to fuel consumption and Carbon dioxide emission of cars. Then, we split our data into training and test sets, create a model using training set, evaluate your model using test set, and finally use model to predict unknown value.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Table of contents</h1>\n",
    "\n",
    "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
    "    <ol>\n",
    "        <li><a href=\"#understanding_data\">Understanding the Data</a></li>\n",
    "        <li><a href=\"#reading_data\">Reading the data in</a></li>\n",
    "        <li><a href=\"#data_exploration\">Data Exploration</a></li>\n",
    "        <li><a href=\"#simple_regression\">Simple Regression Model</a></li>\n",
    "    </ol>\n",
    "</div>\n",
    "<br>\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Importing Needed packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import pylab as pl\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Downloading Data\n",
    "To download the data, we will use !wget to download it from IBM Object Storage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2020-01-11 09:06:09--  https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv\n",
      "Resolving s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)... 67.228.254.196\n",
      "Connecting to s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)|67.228.254.196|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 72629 (71K) [text/csv]\n",
      "Saving to: ‘FuelConsumption.csv’\n",
      "\n",
      "FuelConsumption.csv 100%[===================>]  70.93K  --.-KB/s    in 0.04s   \n",
      "\n",
      "2020-01-11 09:06:09 (1.65 MB/s) - ‘FuelConsumption.csv’ saved [72629/72629]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget -O FuelConsumption.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Did you know?__ When it comes to Machine Learning, you will likely be working with large datasets. As a business, where can you host your data? IBM is offering a unique opportunity for businesses, with 10 Tb of IBM Cloud Object Storage: [Sign up now for free](http://cocl.us/ML0101EN-IBM-Offer-CC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "\n",
    "<h2 id=\"understanding_data\">Understanding the Data</h2>\n",
    "\n",
    "### `FuelConsumption.csv`:\n",
    "We have downloaded a fuel consumption dataset, **`FuelConsumption.csv`**, which contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada. [Dataset source](http://open.canada.ca/data/en/dataset/98f1a129-f628-4ce4-b24d-6f16bf24dd64)\n",
    "\n",
    "- **MODELYEAR** e.g. 2014\n",
    "- **MAKE** e.g. Acura\n",
    "- **MODEL** e.g. ILX\n",
    "- **VEHICLE CLASS** e.g. SUV\n",
    "- **ENGINE SIZE** e.g. 4.7\n",
    "- **CYLINDERS** e.g 6\n",
    "- **TRANSMISSION** e.g. A6\n",
    "- **FUEL CONSUMPTION in CITY(L/100 km)** e.g. 9.9\n",
    "- **FUEL CONSUMPTION in HWY (L/100 km)** e.g. 8.9\n",
    "- **FUEL CONSUMPTION COMB (L/100 km)** e.g. 9.2\n",
    "- **CO2 EMISSIONS (g/km)** e.g. 182   --> low --> 0\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2 id=\"reading_data\">Reading the data in</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MODELYEAR</th>\n",
       "      <th>MAKE</th>\n",
       "      <th>MODEL</th>\n",
       "      <th>VEHICLECLASS</th>\n",
       "      <th>ENGINESIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>TRANSMISSION</th>\n",
       "      <th>FUELTYPE</th>\n",
       "      <th>FUELCONSUMPTION_CITY</th>\n",
       "      <th>FUELCONSUMPTION_HWY</th>\n",
       "      <th>FUELCONSUMPTION_COMB</th>\n",
       "      <th>FUELCONSUMPTION_COMB_MPG</th>\n",
       "      <th>CO2EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>AS5</td>\n",
       "      <td>Z</td>\n",
       "      <td>9.9</td>\n",
       "      <td>6.7</td>\n",
       "      <td>8.5</td>\n",
       "      <td>33</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>2.4</td>\n",
       "      <td>4</td>\n",
       "      <td>M6</td>\n",
       "      <td>Z</td>\n",
       "      <td>11.2</td>\n",
       "      <td>7.7</td>\n",
       "      <td>9.6</td>\n",
       "      <td>29</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>ILX HYBRID</td>\n",
       "      <td>COMPACT</td>\n",
       "      <td>1.5</td>\n",
       "      <td>4</td>\n",
       "      <td>AV7</td>\n",
       "      <td>Z</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>5.9</td>\n",
       "      <td>48</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>MDX 4WD</td>\n",
       "      <td>SUV - SMALL</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>AS6</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.7</td>\n",
       "      <td>9.1</td>\n",
       "      <td>11.1</td>\n",
       "      <td>25</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014</td>\n",
       "      <td>ACURA</td>\n",
       "      <td>RDX AWD</td>\n",
       "      <td>SUV - SMALL</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>AS6</td>\n",
       "      <td>Z</td>\n",
       "      <td>12.1</td>\n",
       "      <td>8.7</td>\n",
       "      <td>10.6</td>\n",
       "      <td>27</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MODELYEAR   MAKE       MODEL VEHICLECLASS  ENGINESIZE  CYLINDERS  \\\n",
       "0       2014  ACURA         ILX      COMPACT         2.0          4   \n",
       "1       2014  ACURA         ILX      COMPACT         2.4          4   \n",
       "2       2014  ACURA  ILX HYBRID      COMPACT         1.5          4   \n",
       "3       2014  ACURA     MDX 4WD  SUV - SMALL         3.5          6   \n",
       "4       2014  ACURA     RDX AWD  SUV - SMALL         3.5          6   \n",
       "\n",
       "  TRANSMISSION FUELTYPE  FUELCONSUMPTION_CITY  FUELCONSUMPTION_HWY  \\\n",
       "0          AS5        Z                   9.9                  6.7   \n",
       "1           M6        Z                  11.2                  7.7   \n",
       "2          AV7        Z                   6.0                  5.8   \n",
       "3          AS6        Z                  12.7                  9.1   \n",
       "4          AS6        Z                  12.1                  8.7   \n",
       "\n",
       "   FUELCONSUMPTION_COMB  FUELCONSUMPTION_COMB_MPG  CO2EMISSIONS  \n",
       "0                   8.5                        33           196  \n",
       "1                   9.6                        29           221  \n",
       "2                   5.9                        48           136  \n",
       "3                  11.1                        25           255  \n",
       "4                  10.6                        27           244  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"FuelConsumption.csv\")\n",
    "\n",
    "# take a look at the dataset\n",
    "df.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2 id=\"data_exploration\">Data Exploration</h2>\n",
    "Lets first have a descriptive exploration on our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MODELYEAR</th>\n",
       "      <th>ENGINESIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>FUELCONSUMPTION_CITY</th>\n",
       "      <th>FUELCONSUMPTION_HWY</th>\n",
       "      <th>FUELCONSUMPTION_COMB</th>\n",
       "      <th>FUELCONSUMPTION_COMB_MPG</th>\n",
       "      <th>CO2EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1067.0</td>\n",
       "      <td>1067.000000</td>\n",
       "      <td>1067.000000</td>\n",
       "      <td>1067.000000</td>\n",
       "      <td>1067.000000</td>\n",
       "      <td>1067.000000</td>\n",
       "      <td>1067.000000</td>\n",
       "      <td>1067.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>3.346298</td>\n",
       "      <td>5.794752</td>\n",
       "      <td>13.296532</td>\n",
       "      <td>9.474602</td>\n",
       "      <td>11.580881</td>\n",
       "      <td>26.441425</td>\n",
       "      <td>256.228679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.415895</td>\n",
       "      <td>1.797447</td>\n",
       "      <td>4.101253</td>\n",
       "      <td>2.794510</td>\n",
       "      <td>3.485595</td>\n",
       "      <td>7.468702</td>\n",
       "      <td>63.372304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.600000</td>\n",
       "      <td>4.900000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>108.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>10.250000</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>207.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>12.600000</td>\n",
       "      <td>8.800000</td>\n",
       "      <td>10.900000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>251.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>15.550000</td>\n",
       "      <td>10.850000</td>\n",
       "      <td>13.350000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>294.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>30.200000</td>\n",
       "      <td>20.500000</td>\n",
       "      <td>25.800000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>488.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       MODELYEAR   ENGINESIZE    CYLINDERS  FUELCONSUMPTION_CITY  \\\n",
       "count     1067.0  1067.000000  1067.000000           1067.000000   \n",
       "mean      2014.0     3.346298     5.794752             13.296532   \n",
       "std          0.0     1.415895     1.797447              4.101253   \n",
       "min       2014.0     1.000000     3.000000              4.600000   \n",
       "25%       2014.0     2.000000     4.000000             10.250000   \n",
       "50%       2014.0     3.400000     6.000000             12.600000   \n",
       "75%       2014.0     4.300000     8.000000             15.550000   \n",
       "max       2014.0     8.400000    12.000000             30.200000   \n",
       "\n",
       "       FUELCONSUMPTION_HWY  FUELCONSUMPTION_COMB  FUELCONSUMPTION_COMB_MPG  \\\n",
       "count          1067.000000           1067.000000               1067.000000   \n",
       "mean              9.474602             11.580881                 26.441425   \n",
       "std               2.794510              3.485595                  7.468702   \n",
       "min               4.900000              4.700000                 11.000000   \n",
       "25%               7.500000              9.000000                 21.000000   \n",
       "50%               8.800000             10.900000                 26.000000   \n",
       "75%              10.850000             13.350000                 31.000000   \n",
       "max              20.500000             25.800000                 60.000000   \n",
       "\n",
       "       CO2EMISSIONS  \n",
       "count   1067.000000  \n",
       "mean     256.228679  \n",
       "std       63.372304  \n",
       "min      108.000000  \n",
       "25%      207.000000  \n",
       "50%      251.000000  \n",
       "75%      294.000000  \n",
       "max      488.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summarize the data\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets select some features to explore more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ENGINESIZE</th>\n",
       "      <th>CYLINDERS</th>\n",
       "      <th>FUELCONSUMPTION_COMB</th>\n",
       "      <th>CO2EMISSIONS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>8.5</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.4</td>\n",
       "      <td>4</td>\n",
       "      <td>9.6</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>4</td>\n",
       "      <td>5.9</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>11.1</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>10.6</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>10.0</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>10.1</td>\n",
       "      <td>232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3.7</td>\n",
       "      <td>6</td>\n",
       "      <td>11.1</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3.7</td>\n",
       "      <td>6</td>\n",
       "      <td>11.6</td>\n",
       "      <td>267</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ENGINESIZE  CYLINDERS  FUELCONSUMPTION_COMB  CO2EMISSIONS\n",
       "0         2.0          4                   8.5           196\n",
       "1         2.4          4                   9.6           221\n",
       "2         1.5          4                   5.9           136\n",
       "3         3.5          6                  11.1           255\n",
       "4         3.5          6                  10.6           244\n",
       "5         3.5          6                  10.0           230\n",
       "6         3.5          6                  10.1           232\n",
       "7         3.7          6                  11.1           255\n",
       "8         3.7          6                  11.6           267"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]\n",
    "cdf.head(9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can plot each of these features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "viz = cdf[['CYLINDERS','ENGINESIZE','CO2EMISSIONS','FUELCONSUMPTION_COMB']]\n",
    "viz.hist()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, lets plot each of these features vs the Emission, to see how linear is their relation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS,  color='blue')\n",
    "plt.xlabel(\"FUELCONSUMPTION_COMB\")\n",
    "plt.ylabel(\"Emission\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')\n",
    "plt.xlabel(\"Engine size\")\n",
    "plt.ylabel(\"Emission\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Practice\n",
    "plot __CYLINDER__ vs the Emission, to see how linear is their relation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# write your code here\n",
    "plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS, color='blue')\n",
    "plt.xlabel(\"Cylinders\")\n",
    "plt.ylabel(\"Emission\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Double-click __here__ for the solution.\n",
    "\n",
    "<!-- Your answer is below:\n",
    "    \n",
    "plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS, color='blue')\n",
    "plt.xlabel(\"Cylinders\")\n",
    "plt.ylabel(\"Emission\")\n",
    "plt.show()\n",
    "\n",
    "-->"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Creating train and test dataset\n",
    "Train/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. \n",
    "This will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.\n",
    "\n",
    "This means that we know the outcome of each data point in this dataset, making it great to test with! And since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it is truly an out-of-sample testing.\n",
    "\n",
    "Lets split our dataset into train and test sets, 80% of the entire data for training, and the 20% for testing. We create a mask to select random rows using __np.random.rand()__ function: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "msk = np.random.rand(len(df)) < 0.8\n",
    "train = cdf[msk]\n",
    "test = cdf[~msk]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2 id=\"simple_regression\">Simple Regression Model</h2>\n",
    "Linear Regression fits a linear model with coefficients $\\theta = (\\theta_1, ..., \\theta_n)$ to minimize the 'residual sum of squares' between the independent x in the dataset, and the dependent y by the linear approximation. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Train data distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\n",
    "plt.xlabel(\"Engine size\")\n",
    "plt.ylabel(\"Emission\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Modeling\n",
    "Using sklearn package to model data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [[39.5520113]]\n",
      "Intercept:  [123.77952181]\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "regr = linear_model.LinearRegression()\n",
    "train_x = np.asanyarray(train[['ENGINESIZE']])\n",
    "train_y = np.asanyarray(train[['CO2EMISSIONS']])\n",
    "regr.fit (train_x, train_y)\n",
    "# The coefficients\n",
    "print ('Coefficients: ', regr.coef_)\n",
    "print ('Intercept: ',regr.intercept_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As mentioned before, __Coefficient__ and __Intercept__ in the simple linear regression, are the parameters of the fit line. \n",
    "Given that it is a simple linear regression, with only 2 parameters, and knowing that the parameters are the intercept and slope of the line, sklearn can estimate them directly from our data. \n",
    "Notice that all of the data must be available to traverse and calculate the parameters.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Plot outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can plot the fit line over the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Emission')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\n",
    "plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')\n",
    "plt.xlabel(\"Engine size\")\n",
    "plt.ylabel(\"Emission\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Evaluation\n",
    "we compare the actual values and predicted values to calculate the accuracy of a regression model. Evaluation metrics provide a key role in the development of a model, as it provides insight to areas that require improvement.\n",
    "\n",
    "There are different model evaluation metrics, lets use MSE here to calculate the accuracy of our model based on the test set: \n",
    "<ul>\n",
    "    <li> Mean absolute error: It is the mean of the absolute value of the errors. This is the easiest of the metrics to understand since it’s just average error.</li>\n",
    "    <li> Mean Squared Error (MSE): Mean Squared Error (MSE) is the mean of the squared error. It’s more popular than Mean absolute error because the focus is geared more towards large errors. This is due to the squared term exponentially increasing larger errors in comparison to smaller ones.</li>\n",
    "    <li> Root Mean Squared Error (RMSE): This is the square root of the Mean Square Error. </li>\n",
    "    <li> R-squared is not error, but is a popular metric for accuracy of your model. It represents how close the data are to the fitted regression line. The higher the R-squared, the better the model fits your data. Best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse).</li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error: 22.32\n",
      "Residual sum of squares (MSE): 847.67\n",
      "R2-score: 0.72\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "test_x = np.asanyarray(test[['ENGINESIZE']])\n",
    "test_y = np.asanyarray(test[['CO2EMISSIONS']])\n",
    "test_y_hat = regr.predict(test_x)\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_hat - test_y)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_hat - test_y) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y_hat , test_y) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "deletable": true,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2>Want to learn more?</h2>\n",
    "\n",
    "IBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems – by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"http://cocl.us/ML0101EN-SPSSModeler\">SPSS Modeler</a>\n",
    "\n",
    "Also, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https://cocl.us/ML0101EN_DSX\">Watson Studio</a>\n",
    "\n",
    "<h3>Thanks for completing this lesson!</h3>\n",
    "\n",
    "<h4>Author:  <a href=\"https://ca.linkedin.com/in/saeedaghabozorgi\">Saeed Aghabozorgi</a></h4>\n",
    "<p><a href=\"https://ca.linkedin.com/in/saeedaghabozorgi\">Saeed Aghabozorgi</a>, PhD is a Data Scientist in IBM with a track record of developing enterprise level applications that substantially increases clients’ ability to turn data into actionable knowledge. He is a researcher in data mining field and expert in developing advanced analytic methods like machine learning and statistical modelling on large datasets.</p>\n",
    "\n",
    "<hr>\n",
    "\n",
    "<p>Copyright &copy; 2018 <a href=\"https://cocl.us/DX0108EN_CC\">Cognitive Class</a>. This notebook and its source code are released under the terms of the <a href=\"https://bigdatauniversity.com/mit-license/\">MIT License</a>.</p>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
